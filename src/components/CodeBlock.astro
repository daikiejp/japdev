---
import type { CodeBlock } from '../data/devsheetData';
import { codeToHtml } from 'shiki';

interface Props {
  codeBlock: CodeBlock;
}

const { codeBlock } = Astro.props;

let highlightedCode = '';
if (codeBlock.code) {
  const rawHtml = await codeToHtml(codeBlock.code, {
    lang: codeBlock.language,
    theme: 'synthwave-84',
  });
  highlightedCode = addLineHighlighting(rawHtml, codeBlock.highlightLines);
}


let tabsHighlighted: { label: string; html: string; language?: string }[] = [];
if (codeBlock.tabs) {
  tabsHighlighted = await Promise.all(
    codeBlock.tabs.map(async (tab) => ({
      label: tab.label,
      html: await codeToHtml(tab.code, {
        lang: tab.language || codeBlock.language,
        theme: 'synthwave-84',
      }),
      language: tab.language || codeBlock.language,
    }))
  );
}

function addLineHighlighting(html: string, lines: number[] | undefined) {
  if (!lines || lines.length === 0) return html;

  const parts = html.split(/(<span class="line">)/g);
  if (parts.length < 3) return html;

  let lineNumber = 0;
  const result: string[] = [];

  for (let i = 0; i < parts.length; i++) {
    if (parts[i] === '<span class="line">') {
      lineNumber++;
      if (lines.includes(lineNumber)) {
        result.push('<span class="line highlight-line">');
      } else {
        result.push(parts[i]);
      }
    } else {
      result.push(parts[i]);
    }
  }

  return result.join('');
}
---
<!-- コードブロック -->
<div class="code-block-wrapper mb-6">
  {codeBlock.title && (
    <div class="code-block-header bg-green-200 p-6 rounded-lg mb-4">
      <h4 class="text-gray-600 font-medium text-md">{codeBlock.title}</h4>
    </div>
  )}
  
  <div class="code-block relative rounded-lg overflow-hidden" class:list={[!codeBlock.title && 'rounded-t-lg']}>
    <!-- ファイル名とプログラミング言語を含むヘッダー -->
    <div class="code-toolbar flex items-center justify-between px-4 py-2 bg-gray-900 border-b border-gray-700">
      <div class="flex items-center gap-3">
        {codeBlock.filename && (
          <span class="text-gray-400 text-sm font-mono">{codeBlock.filename}</span>
        )}
        <span class="px-2 py-0.5 bg-gray-800 text-gray-300 text-xs rounded font-mono">
          {codeBlock.language}
        </span>
      </div>
      <button 
        class="copy-button flex items-center gap-1 px-3 py-1 bg-gray-800 hover:bg-gray-700 text-gray-300 text-xs rounded transition-colors"
        data-code={codeBlock.tabs ? '' : codeBlock.code}
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
        </svg>
        <span class="copy-text">コピー</span>
      </button>
    </div>

    <!-- タブ（存在する場合）-->
    {codeBlock.tabs && codeBlock.tabs.length > 0 ? (
      <div class="tabs-wrapper">
        <div class="tabs-header flex gap-1 px-4 pt-3 bg-[#0d1117]">
          {codeBlock.tabs.map((tab, index) => (
            <button 
              class={`tab-button px-4 py-2 text-sm font-medium rounded-t transition-colors ${
                index === 0 
                  ? 'bg-gray-900 text-white' 
                  : 'bg-gray-800 text-gray-400 hover:text-gray-200'
              }`}
              data-tab-index={index}
            >
              {tab.label}
            </button>
          ))}
        </div>
        <div class="tabs-content">
          {tabsHighlighted.map((tab, index) => (
            <div 
              class={`tab-panel ${index === 0 ? '' : 'hidden'}`}
              data-tab-panel={index}
              data-code={codeBlock.tabs![index].code}
            >
              <div class="shiki-wrapper" set:html={tab.html} />
            </div>
          ))}
        </div>
      </div>
    ) : (
      <div class="shiki-wrapper" set:html={highlightedCode} />
    )}
  </div>
</div>

<script>
  document.querySelectorAll('.copy-button').forEach((button) => {
    button.addEventListener('click', async () => {
      const btn = button as HTMLButtonElement;
      const copyText = btn.querySelector('.copy-text');
      
      let code = btn.getAttribute('data-code') || '';
      
      if (!code) {
        const codeBlock = btn.closest('.code-block');
        const activePanel = codeBlock?.querySelector('.tab-panel:not(.hidden)');
        code = activePanel?.getAttribute('data-code') || '';
      }
      
      try {
        await navigator.clipboard.writeText(code);
        if (copyText) {
          copyText.textContent = 'コピーしました！';
          setTimeout(() => {
            copyText.textContent = 'コピー';
          }, 2000);
        }
      } catch (err) {
        console.error('Failed to copy:', err);
      }
    });
  });

  document.querySelectorAll('.tab-button').forEach((button) => {
    button.addEventListener('click', () => {
      const btn = button as HTMLButtonElement;
      const tabIndex = btn.getAttribute('data-tab-index');
      const tabsWrapper = btn.closest('.tabs-wrapper');
      
      if (!tabsWrapper || !tabIndex) return;
      
      tabsWrapper.querySelectorAll('.tab-button').forEach((b) => {
        b.classList.remove('bg-gray-900', 'text-white');
        b.classList.add('bg-gray-800', 'text-gray-400');
      });
      btn.classList.remove('bg-gray-800', 'text-gray-400');
      btn.classList.add('bg-gray-900', 'text-white');
      
      tabsWrapper.querySelectorAll('.tab-panel').forEach((panel) => {
        panel.classList.add('hidden');
      });
      const activePanel = tabsWrapper.querySelector(`[data-tab-panel="${tabIndex}"]`);
      activePanel?.classList.remove('hidden');
    });
  });
</script>

<style is:global>
  .shiki-wrapper {
    overflow-x: auto;
    background: rgb(38, 35, 53);
  }

  .shiki-wrapper pre {
    padding: 1rem;
    margin: 0;
    background: transparent !important;
  }

  .shiki-wrapper code {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.875rem;
    line-height: 1.4;
    counter-reset: line;
  }

  .shiki-wrapper .line {
    display: inline-block;
    padding-left: 3rem;
    position: relative;
    width: 100%;
    line-height: 1.4;
    min-height: 1.2em;
  }

  .shiki-wrapper .line::before {
    content: counter(line);
    counter-increment: line;
    position: absolute;
    left: 0;
    width: 2.5rem;
    text-align: right;
    color: #6e7681;
    user-select: none;
    padding-right: 0.75rem;
  }

  .shiki-wrapper .line.highlight-line {
    background: rgba(56, 139, 253, 0.15);
    border-left: 3px solid #388bfd;
    padding-left: calc(3rem - 3px);
  }

  .shiki-wrapper .line.highlight-line::before {
    color: #58a6ff;
    font-weight: 600;
  }

  .shiki-wrapper::-webkit-scrollbar {
    height: 8px;
  }

  .shiki-wrapper::-webkit-scrollbar-track {
    background: #161b22;
  }

  .shiki-wrapper::-webkit-scrollbar-thumb {
    background: #30363d;
    border-radius: 4px;
  }

  .shiki-wrapper::-webkit-scrollbar-thumb:hover {
    background: #484f58;
  }
</style>
